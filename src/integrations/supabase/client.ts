
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Json } from './types';

const SUPABASE_URL = "https://smlaqershlicbckfwyed.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNtbGFxZXJzaGxpY2Jja2Z3eWVkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1NzAzNjgsImV4cCI6MjA1OTE0NjM2OH0.49aBX-fewsh1kGWRyNLSGwwLk0FRTsWVf7cJc10_N7g";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define proper type interfaces for custom functions
export interface LoginResponse {
  success: boolean;
  message?: string;
  user_id?: string;
  role?: string;
  token?: string;
  expires_at?: string;
}

export interface BusinessResponse {
  success: boolean;
  message?: string;
  business?: any;
}

// Type guard functions to check if the response has the expected structure
function isLoginResponse(obj: any): obj is LoginResponse {
  return obj && typeof obj === 'object' && 'success' in obj;
}

function isBusinessResponse(obj: any): obj is BusinessResponse {
  return obj && typeof obj === 'object' && 'success' in obj;
}

// Custom login function that uses our database function
export const customLogin = async (usuario: string, contrasena: string): Promise<LoginResponse> => {
  console.log('Intentando login con:', usuario, 'y contraseña:', contrasena.replace(/./g, '*'));
  
  const { data, error } = await supabase.rpc("custom_login", {
    p_username: usuario,
    p_password: contrasena
  });
  
  console.log('Respuesta de login:', { data, error });
  
  if (error) {
    console.error('Error en custom login:', error);
    return { success: false, message: error.message };
  }
  
  // Properly handle the JSON response with type checking
  if (isLoginResponse(data)) {
    console.log('Login exitoso para:', usuario, 'con rol:', data.role);
    return data;
  }
  
  console.error('Formato de respuesta inesperado:', data);
  return { success: false, message: 'Error desconocido: formato de respuesta inválido' };
};

// Get business data for a user
export const getBusinessByUserId = async (userId: string): Promise<BusinessResponse> => {
  console.log('Obteniendo datos de negocio para usuario ID:', userId);
  
  const { data, error } = await supabase.rpc("get_business_by_user_id", {
    p_user_id: userId
  });
  
  console.log('Respuesta de negocio:', { data, error });
  
  if (error) {
    console.error('Error al obtener datos del negocio:', error);
    return { success: false, message: error.message };
  }
  
  // Properly handle the JSON response with type checking
  if (isBusinessResponse(data)) {
    return data;
  }
  
  console.error('Formato de respuesta inesperado:', data);
  return { success: false, message: 'Error desconocido: formato de respuesta inválido' };
};
